generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categoria {
  idCategoria     Int        @id @default(autoincrement())
  nombreCategoria String     @unique
  servicios       Servicio[] // 
}

model Cliente {
  idCliente          Int       @id @default(autoincrement())
  correo             String    @unique
  contraseña        String
  correoVerificado   Boolean   @default(false)
  datosCompletos     Boolean   @default(false)
  nombre             String?
  telefono           String?
  telefonoSecundario String?
  tipoEntidad        String?
  descripcion        String?
  linkFoto           String?
  calificacion       Int?
  fechaNacimiento    DateTime?
  tipoCuenta         String?
  preferenciasPago   String?
  horarios           String?

  solicitudes SolicitudContratacion[] //
}

model Prestamista {
  idPrestamista      Int       @id @default(autoincrement())
  correo             String    @unique
  contraseña        String
  correoVerificado   Boolean   @default(false)
  datosCompletos     Boolean   @default(false)
  nombre             String?
  telefono           String?
  telefonoSecundario String?
  tipoEntidad        String?
  descripcion        String?
  linkFoto           String?
  calificacion       Int?
  fechaNacimiento    DateTime?
  preferenciasPago   String?
  horarios           String?
  redesSociales      String?
  tipoCuenta         String?
  experiencia        String?
  imgTrabajo         String? @db.Text

  servicios Servicio[]
  fotos     FotoTrabajo[]
}

model Servicio {
  idServicio     Int      @id @default(autoincrement())
  titulo         String
  descripcion    String
  materiales     Boolean  @default(false)
  direccion      String
  garantia       String   @default("No disponible")
  zona           String   @db.Text
  modalidades    String   @default("No disponible") @db.Text
  createdAt      DateTime @default(now())
  fechaInicio    DateTime @default(now())
  imagenes       String   @db.Text
  disponibilidad String?  @db.Text

  prestamista_idPrestamista Int
  categoria_idCategoria     Int

  prestamista Prestamista             @relation(fields: [prestamista_idPrestamista], references: [idPrestamista])
  categoria   Categoria               @relation(fields: [categoria_idCategoria], references: [idCategoria])
  solicitudes SolicitudContratacion[]
}

model SolicitudContratacion {
  idSolicitud         Int      @id @default(autoincrement())
  estado              String   @default("pendiente")
  fechaSolicitud      DateTime
  servicio_idServicio Int
  cliente_idCliente   Int

  servicio Servicio  @relation(fields: [servicio_idServicio], references: [idServicio])
  cliente  Cliente   @relation(fields: [cliente_idCliente], references: [idCliente])
  mensajes Mensaje[]
}

model Mensaje {
  idMensaje                         Int    @id @default(autoincrement())
  remitente                         String
  contenido                         String
  mensaje                           String
  solicitudContratacion_idSolicitud Int

  solicitud SolicitudContratacion @relation(fields: [solicitudContratacion_idSolicitud], references: [idSolicitud])
}

model FotoTrabajo {
  idFoto                    Int    @id @default(autoincrement())
  urlFoto                   String
  prestamista_idPrestamista Int

  prestamista Prestamista @relation(fields: [prestamista_idPrestamista], references: [idPrestamista])
}

enum Disponibilidad {
  lunes_a_viernes
  fines_de_semana
  part_time
  tiempo_completo
}

enum EstadoSolicitud {
  pendiente
  aceptado
  rechazado
  finalizado
  cancelado
}
